// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApp.Domain.Data;

namespace TestApp.Domain.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestApp.Domain.Entities.DocumentEntity", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Child")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DocumentTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("FileEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FileEntityId")
                        .IsUnique();

                    b.ToTable("Documents");

                    b.HasDiscriminator<string>("Child").HasValue("DocumentEntity");
                });

            modelBuilder.Entity("TestApp.Domain.Entities.DocumentType", b =>
                {
                    b.Property<short>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentTypes");

                    b
                        .HasComment("Типы документов");

                    b.HasData(
                        new
                        {
                            DocumentTypeId = (short)1,
                            Name = "Акт о проведении проверки",
                            ShortName = "Акт"
                        },
                        new
                        {
                            DocumentTypeId = (short)2,
                            Name = "Справка об оказании услуг",
                            ShortName = "Справка"
                        },
                        new
                        {
                            DocumentTypeId = (short)3,
                            Name = "Документ о документе 1",
                            ShortName = "Документ 1"
                        },
                        new
                        {
                            DocumentTypeId = (short)4,
                            Name = "Документ о документе 2",
                            ShortName = "Документ 2"
                        },
                        new
                        {
                            DocumentTypeId = (short)5,
                            Name = "Документ о документе 3",
                            ShortName = "Документ 3"
                        });
                });

            modelBuilder.Entity("TestApp.Domain.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("FileEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LoadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FileEntityId");

                    b.ToTable("FileEntities");
                });

            modelBuilder.Entity("TestApp.Domain.Entities.PayerDocument", b =>
                {
                    b.HasBaseType("TestApp.Domain.Entities.DocumentEntity");

                    b.Property<short>("DistCode")
                        .HasColumnType("smallint");

                    b.Property<int>("InsrNumber")
                        .HasColumnType("int");

                    b.Property<short>("RegnCode")
                        .HasColumnType("smallint");

                    b.HasIndex("RegnCode", "DistCode", "InsrNumber")
                        .HasDatabaseName("IX_PayerDocument_RegNumber");

                    b.HasDiscriminator().HasValue("PayerDocument");
                });

            modelBuilder.Entity("TestApp.Domain.Entities.DocumentEntity", b =>
                {
                    b.HasOne("TestApp.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApp.Domain.Entities.FileEntity", "FileEntity")
                        .WithOne("Document")
                        .HasForeignKey("TestApp.Domain.Entities.DocumentEntity", "FileEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("FileEntity");
                });

            modelBuilder.Entity("TestApp.Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("TestApp.Domain.Entities.FileEntity", b =>
                {
                    b.Navigation("Document");
                });
#pragma warning restore 612, 618
        }
    }
}
